# 論理否定 単項演算子
次の関数を定義 単項演算子!(値)
  もし 値 が真なら
    0   
  そうではなければ
    1;  

# 負 単項演算子
次の関数を定義 単項演算子-(値)
  0-値;

# > を < と同じ優先順位で定義
次の関数を定義 二項演算子> 10 (左辺値 右辺値) 
  右辺値 < 左辺値; 

# 論理和 二項演算子
次の関数を定義 二項演算子| 5 (左辺値 右辺値) 
  もし 左辺値 が真なら
    1   
  そうではなければ もし 右辺値 が真なら
    1   
  そうではなければ
    0;  

# 論理積 二項演算子
次の関数を定義 二項演算子& 6 (左辺値 右辺値) 
  もし !左辺値 が真なら
    0   
  そうではなければ
    !!右辺値; 

# 同値比較
次の関数を定義 二項演算子 = 9 (左辺値 右辺値) 
  !(左辺値 < 右辺値 | 左辺値 > 右辺値);

# 順次実行。右の値を返す
次の関数を定義 二項演算子 : 1 (式1 式2) 式2;


次の関数を利用 putchard(char);
次の関数を定義 次の文字コードを持つ文字を表示する(文字コード)
  putchard(文字コード);

次の関数を定義 密度を表示する(密度)
  もし 密度 > 8 が真なら
    次の文字コードを持つ文字を表示する(32)  # ' '
  そうではなければ もし 密度 > 4 が真なら
    次の文字コードを持つ文字を表示する(46)  # '.'
  そうではなければ もし 密度 > 2 が真なら
    次の文字コードを持つ文字を表示する(43)  # '+'
  そうではなければ
    次の文字コードを持つ文字を表示する(42); # '*'

# ある位置が発散するかどうかを決める
次の関数を定義 発散するか？(実数 虚数 繰り返し数 実数初期値 虚数初期値)
  もし 繰り返し数 > 255 | (実数*実数 + 虚数*虚数 > 4) が真なら
    繰り返し数
  そうではなければ
    発散するか？(実数*実数 - 虚数*虚数 + 実数初期値,
                    2*実数*虚数 + 虚数初期値,
                    繰り返し数+1, 実数初期値, 虚数初期値);

# イテレーションを抜けるのに必要だった繰り返しの回数を返す
次の関数を定義 発散するかの確認を開始する(実数 虚数)
  発散するか？(実数, 虚数, 0, 実数, 虚数);

# 指定された2次元の範囲内でマンデルブロ集合を計算してプロットする
次の関数を定義 マンデルブロ(xの最小値 xの最大値 xのステップ   yの最小値 yの最大値 yのステップ)
  次の条件で y = yの最小値, y < yの最大値, yのステップ 以下を繰り返す (
    (次の条件で x = xの最小値, x < xの最大値, xのステップ 以下を繰り返す
       密度を表示する(発散するかの確認を開始する(x,y)))
    : 次の文字コードを持つ文字を表示する(10)
  )

# 指定した倍率で指定された位置のマンデルブロ集合をプロットする
次の関数を定義 マンデルブロ集合を表示する(開始実数値 開始虚数値 実数値の倍率 虚数値の倍率)
  マンデルブロ(開始実数値, 開始実数値+実数値の倍率*78, 実数値の倍率,
             開始虚数値, 開始虚数値+虚数値の倍率*40, 虚数値の倍率);

マンデルブロ集合を表示する(-2.3, -1.3, 0.05, 0.07);
